1a2
> from config import config
2a4,12
> BIGGER_SIZE = 20
> plt.rc('font', size=BIGGER_SIZE)          # controls default text sizes
> plt.rc('axes', titlesize=BIGGER_SIZE)     # fontsize of the axes title
> plt.rc('axes', labelsize=BIGGER_SIZE)    # fontsize of the x and y labels
> plt.rc('xtick', labelsize=BIGGER_SIZE)    # fontsize of the tick labels
> plt.rc('ytick', labelsize=BIGGER_SIZE)    # fontsize of the tick labels
> plt.rc('legend', fontsize=BIGGER_SIZE)    # legend fontsize
> plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title
> 
4,7c14,17
<     x_length = 1000
<     y_length = 1000
<     z_length = 300
<     return x_length/2, y_length/2, z_length
---
>     x_length = config["training"]["boundary"][0][1] - config["training"]["boundary"][0][0]
>     y_length = config["training"]["boundary"][0][3] - config["training"]["boundary"][0][2]
>     z_length = config["training"]["boundary"][0][5] - config["training"]["boundary"][0][4]
>     return x_length, y_length, z_length
28,36c38,62
<     if plane == 'X-Z':
<         points1 = (points1 - x_length)/z_length
<         points2 = (points2)/z_length
<     if plane == 'Y-Z':
<         points1 = (points1 - y_length)/z_length
<         points2 = (points2)/z_length
<     if plane == 'X-Y':
<         points1 = (points1 - x_length)/z_length
<         points2 = (points2 - y_length)/z_length
---
>     if config["data"]["geometry"] == 'ladefense.stl':
>         x_length = x_length/2
>         y_length = y_length/2
>         if plane == 'X-Z':
>             points1 = (points1)/x_length
>             points2 = (points2)/z_length
>         if plane == 'Y-Z':
>             points1 = (points1)/y_length
>             points2 = (points2)/z_length
>         if plane == 'X-Y':
>             points1 = (points1)/x_length
>             points2 = (points2)/y_length
>     else:
>         x_length = x_length/2
>         y_length = y_length/2
>         z_length = z_length*0.3
>         if plane == 'X-Z':
>             points1 = (points1 - x_length)/z_length
>             points2 = (points2)/z_length
>         if plane == 'Y-Z':
>             points1 = (points1 - y_length)/z_length
>             points2 = (points2)/z_length
>         if plane == 'X-Y':
>             points1 = (points1 - x_length)/z_length
>             points2 = (points2 - y_length)/z_length
56,58c82,87
<     if plane in ['X-Z', 'Y-Z']:   
<         lim_min1, lim_max1 = (-1, 1)
<         lim_min2, lim_max2 = (0, 1)
---
>     if plane == 'X-Z':
>         lim_min1, lim_max1 = config["plotting"]["lim_min_max"][0]
>         lim_min2, lim_max2 = config["plotting"]["lim_min_max"][2]
>     elif plane == 'Y-Z':
>         lim_min1, lim_max1 = config["plotting"]["lim_min_max"][1]
>         lim_min2, lim_max2 = config["plotting"]["lim_min_max"][2] 
60,61c89,90
<         lim_min1, lim_max1 = (-1,1)
<         lim_min2, lim_max2 = (-1,1)  
---
>         lim_min1, lim_max1 = config["plotting"]["lim_min_max"][0]
>         lim_min2, lim_max2 = config["plotting"]["lim_min_max"][1] 
149a179,205
> # def get_geometry(plane, filename):
> #     your_mesh = mesh.Mesh.from_file(filename)
> #     if config["data"]["geometry"] == 'scaled_cylinder_sphere.stl':
> #         flattened = your_mesh.vectors.reshape(-1, 3)
> #         x, y, z = flattened[:, 0], flattened[:, 1], flattened[:, 2]
> #         if plane == 'X-Z':
> #             x, z = normalize_grids(plane, x, z)
> #             return x, z
> #         elif plane == 'Y-Z':
> #             y, z = normalize_grids(plane, y, z)
> #             return y, z
> #         elif plane == 'X-Y':
> #             x, y = normalize_grids(plane, x, y)
> #             return x, y
> #     else:
> #         vectors = your_mesh.vectors
> #         return vectors, vectors
> #         # x, y, z = [], [], []
> #         # for triangle in your_mesh.vectors:
> #         #     x_ = [point[0] for point in triangle] + [triangle[0][0]] # Closing the loop
> #         #     y_ = [point[1] for point in triangle] + [triangle[0][1]] # Closing the loop
> #         #     z_ = [point[2] for point in triangle] + [triangle[0][2]] # Closing the loop
> #         #     x.append(x_)
> #         #     y.append(y_)
> #         #     z.append(z_)
> 
> 
152,159c208,245
<     flattened = your_mesh.vectors.reshape(-1, 3)
<     x, y, z = flattened[:, 0], flattened[:, 1], flattened[:, 2]
<     if plane == 'X-Z':
<         return x, z
<     elif plane == 'Y-Z':
<         return y, z
<     elif plane == 'X-Y':
<         return x, y
\ No newline at end of file
---
>     vectors = your_mesh.vectors
>     return vectors, vectors
> 
> def plot_geometry(plane, geometry1, geometry2, scatter_size, ax):
>     geometry = geometry1
>     for triangle in geometry:
>         x = [point[0] for point in triangle] + [triangle[0][0]] # Closing the loop
>         y = [point[1] for point in triangle] + [triangle[0][1]] # Closing the loop
>         z = [point[2] for point in triangle] + [triangle[0][2]] # Closing the loop
>         if plane == 'X-Y':
>             x, y = normalize_grids(plane, x, y)
>             ax.plot(x, y, color='black')
>         if plane == 'X-Z':
>             x, z = normalize_grids(plane, x, z)
>             ax.plot(x, z, color='black')
>         if plane == 'Y-Z':
>             y, z = normalize_grids(plane, y, z)
>             ax.plot(y, z, color='black')
> 
> # def plot_geometry(plane, geometry1, geometry2, scatter_size, ax):
> #     if config["data"]["geometry"] == 'scaled_cylinder_sphere.stl':
> #         ax.scatter(geometry1, geometry2, c='black', s=scatter_size, label='Geometry')
> #     else:
> #         # ax.plot(geometry1, geometry2, c='black')
> #         geometry = geometry1
> #         for triangle in geometry:
> #             x = [point[0] for point in triangle] + [triangle[0][0]] # Closing the loop
> #             y = [point[1] for point in triangle] + [triangle[0][1]] # Closing the loop
> #             z = [point[2] for point in triangle] + [triangle[0][2]] # Closing the loop
> #             if plane == 'X-Y':
> #                 x, y = normalize_grids(plane, x, y)
> #                 ax.plot(x, y, color='black')
> #             if plane == 'X-Z':
> #                 x, z = normalize_grids(plane, x, z)
> #                 ax.plot(x, z, color='black')
> #             if plane == 'Y-Z':
> #                 y, z = normalize_grids(plane, y, z)
> #                 ax.plot(y, z, color='black')
\ No newline at end of file
