2a3
> from testing_definitions import * 
31a33,74
> def solid_boundary_testing(model, device, config, data_dict, model_file_path, output_folder, today, overall_start_time):
>     testing_type = "Boundary Testing"
>     checkpoint = open_model_file(model_file_path, device)
>     all_wind_angles = config["training"]["all_angles"]
>     testing_plot_folder = os.path.join(output_folder, f'solid_boundary_plots_output_{today}_{checkpoint["epoch"]}')
>     feature_scaler = data_dict["feature_scaler"]
>     target_scaler = data_dict["target_scaler"]
>     X_test_tensor = load_boundary_testing_data(config, device, feature_scaler, 'geometry_test_points')
>     chosen_machine_key = config["chosen_machine"]
>     datafolder_path = os.path.join(config["machine"][chosen_machine_key], config["data"]["data_folder_name"])
>     geometry_filename = os.path.join(datafolder_path, config["data"]["geometry"])
>     checkpoint = open_model_file(model_file_path, device)
>     print (f'Model {testing_type} at Epoch = {checkpoint["epoch"]} and Training Completed = {checkpoint["training_completed"]}, Time: {(time.time() - overall_start_time):.2f} Seconds')
>     model.load_state_dict(checkpoint['model_state_dict'])
>     df = evaluate_model_boundary(config, model, all_wind_angles, X_test_tensor, feature_scaler, target_scaler)
>     print (f'Model Evaluated and Starting to Plot, Time: {(time.time() - overall_start_time):.2f} Seconds')
>     plot_boundary_2d(config,df,all_wind_angles,geometry_filename,testing_plot_folder)
>     print (f'Plotting Done, Time: {(time.time() - overall_start_time):.2f} Seconds')
>     evaluation_boundary_physics(model, device, config, data_dict, model_file_path, testing_plot_folder, today, overall_start_time, 'Div')
>     evaluation_boundary_physics(model, device, config, data_dict, model_file_path, testing_plot_folder, today, overall_start_time, 'RANS')
> 
> def surface_boundary_testing(model, device, config, data_dict, model_file_path, output_folder, today, overall_start_time):
>     testing_type = "Boundary Testing"
>     checkpoint = open_model_file(model_file_path, device)
>     all_wind_angles = config["training"]["all_angles"]
>     testing_plot_folder = os.path.join(output_folder, f'surface_boundary_plots_output_{today}_{checkpoint["epoch"]}')
>     feature_scaler = data_dict["feature_scaler"]
>     target_scaler = data_dict["target_scaler"]
>     X_test_tensor = load_boundary_testing_data(config, device, feature_scaler, 'surface_geometry_test_points')
>     chosen_machine_key = config["chosen_machine"]
>     datafolder_path = os.path.join(config["machine"][chosen_machine_key], config["data"]["data_folder_name"])
>     geometry_filename = os.path.join(datafolder_path, config["data"]["geometry"])
>     checkpoint = open_model_file(model_file_path, device)
>     print (f'Model {testing_type} at Epoch = {checkpoint["epoch"]} and Training Completed = {checkpoint["training_completed"]}, Time: {(time.time() - overall_start_time):.2f} Seconds')
>     model.load_state_dict(checkpoint['model_state_dict'])
>     df = evaluate_model_boundary(config, model, all_wind_angles, X_test_tensor, feature_scaler, target_scaler)
>     print (f'Model Evaluated and Starting to Plot, Time: {(time.time() - overall_start_time):.2f} Seconds')
>     plot_boundary_2d(config,df,all_wind_angles,geometry_filename,testing_plot_folder)
>     print (f'Plotting Done, Time: {(time.time() - overall_start_time):.2f} Seconds')
>     evaluation_boundary_physics(model, device, config, data_dict, model_file_path, testing_plot_folder, today, overall_start_time, 'Div')
>     evaluation_boundary_physics(model, device, config, data_dict, model_file_path, testing_plot_folder, today, overall_start_time, 'RANS')
> 
