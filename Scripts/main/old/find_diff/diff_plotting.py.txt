11c11,12
<     ax.scatter(geometry1, geometry2, c='black', s=scatter_size, label='Geometry')
---
>     if config["plotting"]["plot_geometry"]:
>         plot_geometry(plane, geometry1, geometry2, scatter_size, ax)
16c17
<     ax.set_title(f'{cbar_label} in the {plane} Plane for Wind Angle = {wind_angle} with a cut at {coordinate3} = {cut:.2f} +/- {tolerance:.2f}')
---
>     ax.set_title(f'{cbar_label} in the {plane} Plane for Wind Angle = {wind_angle} with a cut at {coordinate3} = {cut:.2f} +/- {tolerance:.2f} with mean = {np.mean(z):.2f} and std dev = {np.std(z):.2f}')
27c28
<     ax.scatter(geometry1, geometry2, c='black', s=scatter_size, label='Geometry')
---
>     plot_geometry(plane, geometry1, geometry2, scatter_size, ax)
42c43
< def make_double_plots(figsize, z, grid1, grid2, grid3_actual, grid3_pred, geometry1, geometry2, quiver_points1, quiver_points2, quiver_v1_actual, quiver_v2_actual, quiver_v1_pred, quiver_v2_pred, plane, wind_angle, cut, tolerance, cbar_label, savename, arrow10 = None, arrow20 = None, arrow11 = None, arrow21 = None):
---
> def make_double_plots(figsize, z_actual, z_pred, grid1, grid2, grid3_actual, grid3_pred, geometry1, geometry2, quiver_points1, quiver_points2, quiver_v1_actual, quiver_v2_actual, quiver_v1_pred, quiver_v2_pred, plane, wind_angle, cut, tolerance, cbar_label, savename, arrow10 = None, arrow20 = None, arrow11 = None, arrow21 = None):
46c47
<     vmin, vmax, levels, cmap, scatter_size, ticks = plotting_details(z)
---
>     vmin, vmax, levels, cmap, scatter_size, ticks = plotting_details(z_actual)
50c51
<     axs[0].scatter(geometry1, geometry2, c='black', s=scatter_size, label='Geometry')
---
>     plot_geometry(plane, geometry1, geometry2, scatter_size, axs[0])
60c61
<     axs[0].set_title(f'Actual {cbar_label} in the {plane} Plane for Wind Angle = {wind_angle} with a cut at {coordinate3} = {cut:.2f} +/- {tolerance:.2f}')
---
>     axs[0].set_title(f'Actual {cbar_label} in the {plane} Plane for Wind Angle = {wind_angle} with a cut at {coordinate3} = {cut:.2f} +/- {tolerance:.2f} \n Mean = {np.mean(z_actual):.2f} and Standard Deviation = {np.std(z_actual):.2f}')
64c65
<     axs[1].scatter(geometry1, geometry2, c='black', s=scatter_size, label='Geometry')
---
>     plot_geometry(plane, geometry1, geometry2, scatter_size, axs[1])
74c75
<     axs[1].set_title(f'Predicted {cbar_label} in the {plane} Plane for Wind Angle = {wind_angle} with a cut at {coordinate3} = {cut:.2f} +/- {tolerance:.2f}')
---
>     axs[1].set_title(f'Predicted {cbar_label} in the {plane} Plane for Wind Angle = {wind_angle} with a cut at {coordinate3} = {cut:.2f} +/- {tolerance:.2f} \n Mean = {np.mean(z_pred):.2f} and Standard Deviation = {np.std(z_pred):.2f}')
79a81,116
> def make_double_scatter_plots(figsize, z_actual, z_pred, grid1, grid2, grid3_actual, grid3_pred, geometry1, geometry2, plane, wind_angle, cut, tolerance, cbar_label, savename, arrow10 = None, arrow20 = None, arrow11 = None, arrow21 = None):
>     coordinate1, coordinate2, coordinate3, lim_min1, lim_max1, lim_min2, lim_max2 = get_plane_config(plane)
>     fig, axs = plt.subplots(1, 2, figsize=figsize, sharey=True)
>     fig.suptitle(f'Comparison of Actual vs. Predicted values with Wind Angle = {wind_angle} in the {plane} Plane with a cut at {coordinate3} = {cut:.2f} +/- {tolerance:.2f}')
>     vmin, vmax, levels, cmap, scatter_size, ticks = plotting_details(z_actual)
>     
>     scatter_actual = axs[0].scatter(grid1, grid2, c=grid3_actual, s=scatter_size, vmin=min(z_actual), vmax=max(z_actual), cmap=cmap)
>     scatter_cbar = fig.colorbar(scatter_actual, ax=axs[0])
>     scatter_cbar.set_label(f'Scatter {cbar_label}', rotation=270, labelpad=15)
>     plot_geometry(plane, geometry1, geometry2, scatter_size, axs[0])
>     if arrow10 is not None and arrow20 is not None:
>         axs[0].add_patch(arrow10)
>         axs[0].add_patch(arrow20)
>     axs[0].set_xlabel(f'{coordinate1} Coordinate')
>     axs[0].set_ylabel(f'{coordinate2} Coordinate')
>     axs[0].set_xlim(lim_min1, lim_max1) 
>     axs[0].set_ylim(lim_min2, lim_max2)
>     axs[0].set_title(f'Actual {cbar_label} in the {plane} Plane for Wind Angle = {wind_angle} with a cut at {coordinate3} = {cut:.2f} +/- {tolerance:.2f} \n Mean = {np.mean(z_actual):.2f} and Standard Deviation = {np.std(z_actual):.2f}')
>     
>     scatter_pred = axs[1].scatter(grid1, grid2, c=grid3_pred, s=scatter_size, vmin=min(z_pred), vmax=max(z_pred), cmap=cmap)
>     scatter_cbar = fig.colorbar(scatter_pred, ax=axs[1])
>     scatter_cbar.set_label(f'Scatter {cbar_label}', rotation=270, labelpad=15)
>     plot_geometry(plane, geometry1, geometry2, scatter_size, axs[1])
>     if arrow11 is not None and arrow21 is not None:
>         axs[1].add_patch(arrow11)
>         axs[1].add_patch(arrow21)
>     axs[1].set_xlabel(f'{coordinate1} Coordinate')
>     axs[1].set_ylabel(f'{coordinate2} Coordinate')
>     axs[1].set_xlim(lim_min1, lim_max1) 
>     axs[1].set_ylim(lim_min2, lim_max2)
>     axs[1].set_title(f'Predicted {cbar_label} in the {plane} Plane for Wind Angle = {wind_angle} with a cut at {coordinate3} = {cut:.2f} +/- {tolerance:.2f} \n Mean = {np.mean(z_pred):.2f} and Standard Deviation = {np.std(z_pred):.2f}')
> 
>     plt.tight_layout()
>     plt.savefig(savename)
>     plt.close()
> 
96d132
<     geometry1, geometry2 = normalize_grids(plane, geometry1, geometry2)
100c136
<         make_scatter_plot((16, 8), filtered_df[savenames[counter][0]].values, grid1, grid2, grid3, geometry1, geometry2, plane, wind_angle, cut, tolerance, savenames[counter][1], savenames[counter][2])
---
>         make_scatter_plot((32, 16), filtered_df[savenames[counter][0]].values, grid1, grid2, grid3, geometry1, geometry2, plane, wind_angle, cut, tolerance, savenames[counter][1], savenames[counter][2])
115d150
<     geometry1, geometry2 = normalize_grids(plane, geometry1, geometry2)
120,124c155,159
<         make_singular_plot((16, 8), filtered_df[savenames[counter][0]].values, grid1, grid2, grid3, geometry1, geometry2, quiver_points1, quiver_points2, quiver_v1, quiver_v2, plane, wind_angle, cut, tolerance, savenames[counter][1], savenames[counter][2])
<         if counter == 0 and plane == 'X-Y':
<             arrow1 = make_arrow(plane,500,500,wind_angle)
<             arrow2 = make_arrow(plane,500,570,wind_angle)
<             make_singular_plot((16, 8), filtered_df[savenames[counter][0]].values, grid1, grid2, grid3, geometry1, geometry2, quiver_points1, quiver_points2, quiver_v1, quiver_v2, plane, wind_angle, cut, tolerance, savenames[counter][1], f'{savenames[counter][2]}_arrow.png', arrow1, arrow2)
---
>         make_singular_plot((32, 16), filtered_df[savenames[counter][0]].values, grid1, grid2, grid3, geometry1, geometry2, quiver_points1, quiver_points2, quiver_v1, quiver_v2, plane, wind_angle, cut, tolerance, savenames[counter][1], savenames[counter][2])
>         if counter == 0 and plane == 'X-Y' and config["plotting"]["arrow"][0]:
>             arrow1 = arrow(plane,config["plotting"]["arrow"][1][0][0],config["plotting"]["arrow"][1][0][1],wind_angle)
>             arrow2 = arrow(plane,config["plotting"]["arrow"][1][1][0],config["plotting"]["arrow"][1][1][1],wind_angle)
>             make_singular_plot((32, 16), filtered_df[savenames[counter][0]].values, grid1, grid2, grid3, geometry1, geometry2, quiver_points1, quiver_points2, quiver_v1, quiver_v2, plane, wind_angle, cut, tolerance, savenames[counter][1], f'{savenames[counter][2]}_arrow.png', arrow1, arrow2)
128a164,180
> def plot_data_scatter(df, plane, wind_angle, cut, tolerance, geometry_filename, savenames):
>     coordinate1, coordinate2, coordinate3, lim_min1, lim_max1, lim_min2, lim_max2 = get_plane_config(plane)
>     filtered_df = filter_dataframe(df, wind_angle, coordinate3, cut, tolerance)
>     grid1, grid2 = define_scatter_grid(filtered_df, coordinate1, coordinate2)
>     if 'Pressure' in filtered_df.columns and 'TurbVisc' in filtered_df.columns:
>         all_grids = [filtered_df['Velocity_Magnitude'],filtered_df['Velocity_X'],filtered_df['Velocity_Y'],filtered_df['Velocity_Z'],filtered_df['Pressure'],filtered_df['TurbVisc']]
>     else:
>         all_grids = [filtered_df['Velocity_Magnitude'],filtered_df['Velocity_X'],filtered_df['Velocity_Y'],filtered_df['Velocity_Z']]
>     geometry1, geometry2 = get_geometry(plane, geometry_filename)
>     grid1, grid2 = normalize_grids(plane, grid1, grid2)
>     cut, tolerance = normalize_cut_tolerance(plane, cut, tolerance)
>     counter = 0
>     for grid3 in all_grids:
>         while counter < len(savenames):
>             make_scatter_plot((32, 16), filtered_df[savenames[counter][0]].values, grid1, grid2, grid3, geometry1, geometry2, plane, wind_angle, cut, tolerance, savenames[counter][1], savenames[counter][2])
>             counter += 1
> 
143d194
<     geometry1, geometry2 = normalize_grids(plane, geometry1, geometry2)
149,155c200,206
<         make_double_plots((16, 8), filtered_df[savenames[counter][0]].values, grid1, grid2, grid3_actual, grid3_pred, geometry1, geometry2, quiver_points1, quiver_points2, quiver_v1_actual, quiver_v2_actual, quiver_v1_pred, quiver_v2_pred, plane, wind_angle, cut, tolerance, savenames[counter][1], savenames[counter][2], arrow10 = None, arrow20 = None, arrow11 = None, arrow21 = None)
<         if counter == 0 and plane == 'X-Y':
<             arrow10 = make_arrow(plane,500,500,wind_angle)
<             arrow20 = make_arrow(plane,500,570,wind_angle)
<             arrow11 = make_arrow(plane,500,500,wind_angle)
<             arrow21 = make_arrow(plane,500,570,wind_angle)
<             make_double_plots((16, 8), filtered_df[savenames[counter][0]].values, grid1, grid2, grid3_actual, grid3_pred, geometry1, geometry2, quiver_points1, quiver_points2, quiver_v1_actual, quiver_v2_actual, quiver_v1_pred, quiver_v2_pred, plane, wind_angle, cut, tolerance, savenames[counter][1], f'{savenames[counter][2]}_arrow.png', arrow10, arrow20, arrow11, arrow21)
---
>         make_double_plots((32, 16), filtered_df[savenames[counter][0]].values, filtered_df[savenames[counter][0].replace("_Actual", "_Predicted")].values, grid1, grid2, grid3_actual, grid3_pred, geometry1, geometry2, quiver_points1, quiver_points2, quiver_v1_actual, quiver_v2_actual, quiver_v1_pred, quiver_v2_pred, plane, wind_angle, cut, tolerance, savenames[counter][1], savenames[counter][2], arrow10 = None, arrow20 = None, arrow11 = None, arrow21 = None)
>         if counter == 0 and plane == 'X-Y' and config["plotting"]["arrow"][0]:
>             arrow10 = arrow(plane,config["plotting"]["arrow"][1][0][0],config["plotting"]["arrow"][1][0][1],wind_angle)
>             arrow20 = arrow(plane,config["plotting"]["arrow"][1][1][0],config["plotting"]["arrow"][1][1][1],wind_angle)
>             arrow11 = arrow(plane,config["plotting"]["arrow"][1][0][0],config["plotting"]["arrow"][1][0][1],wind_angle)
>             arrow21 = arrow(plane,config["plotting"]["arrow"][1][1][0],config["plotting"]["arrow"][1][1][1],wind_angle)
>             make_double_plots((32, 16), filtered_df[savenames[counter][0]].values, filtered_df[savenames[counter][0].replace("_Actual", "_Predicted")].values, grid1, grid2, grid3_actual, grid3_pred, geometry1, geometry2, quiver_points1, quiver_points2, quiver_v1_actual, quiver_v2_actual, quiver_v1_pred, quiver_v2_pred, plane, wind_angle, cut, tolerance, savenames[counter][1], f'{savenames[counter][2]}_arrow.png', arrow10, arrow20, arrow11, arrow21)
159a211,234
> def plot_data_scatter_predictions(df, plane, wind_angle, cut, tolerance, geometry_filename, savenames):
>     coordinate1, coordinate2, coordinate3, lim_min1, lim_max1, lim_min2, lim_max2 = get_plane_config(plane)
>     filtered_df = filter_dataframe(df, wind_angle, coordinate3, cut, tolerance)
>     grid1, grid2 = define_scatter_grid(filtered_df, coordinate1, coordinate2)
>     if 'Pressure_Actual' in filtered_df.columns and 'TurbVisc_Actual' in filtered_df.columns:
>         all_grids = [[filtered_df['Velocity_Magnitude_Actual'], filtered_df['Velocity_Magnitude_Predicted']], [filtered_df['Velocity_X_Actual'], filtered_df['Velocity_X_Predicted']], [filtered_df['Velocity_Y_Actual'], filtered_df['Velocity_Y_Predicted']], [filtered_df['Velocity_Z_Actual'], filtered_df['Velocity_Z_Predicted']], [filtered_df['Pressure_Actual'], filtered_df['Pressure_Predicted']], [filtered_df['TurbVisc_Actual'], filtered_df['TurbVisc_Predicted']]]
>     else:
>         all_grids = [[filtered_df['Velocity_Magnitude_Actual'], filtered_df['Velocity_Magnitude_Predicted']], [filtered_df['Velocity_X_Actual'], filtered_df['Velocity_X_Predicted']], [filtered_df['Velocity_Y_Actual'], filtered_df['Velocity_Y_Predicted']], [filtered_df['Velocity_Z_Actual'], filtered_df['Velocity_Z_Predicted']]]
>     geometry1, geometry2 = get_geometry(plane, geometry_filename)
>     grid1, grid2 = normalize_grids(plane, grid1, grid2)
>     cut, tolerance = normalize_cut_tolerance(plane, cut, tolerance)
>     counter = 0
>     for grid3_actual, grid3_pred in all_grids:
>         make_double_scatter_plots((32, 16), filtered_df[savenames[counter][0]].values, filtered_df[savenames[counter][0].replace("_Actual", "_Predicted")].values, grid1, grid2, grid3_actual, grid3_pred, geometry1, geometry2, plane, wind_angle, cut, tolerance, savenames[counter][1], savenames[counter][2], arrow10 = None, arrow20 = None, arrow11 = None, arrow21 = None)
>         if counter == 0 and plane == 'X-Y' and config["plotting"]["arrow"][0]:
>             arrow10 = arrow(plane,config["plotting"]["arrow"][1][0][0],config["plotting"]["arrow"][1][0][1],wind_angle)
>             arrow20 = arrow(plane,config["plotting"]["arrow"][1][1][0],config["plotting"]["arrow"][1][1][1],wind_angle)
>             arrow11 = arrow(plane,config["plotting"]["arrow"][1][0][0],config["plotting"]["arrow"][1][0][1],wind_angle)
>             arrow21 = arrow(plane,config["plotting"]["arrow"][1][1][0],config["plotting"]["arrow"][1][1][1],wind_angle)
>             make_double_scatter_plots((32, 16), filtered_df[savenames[counter][0]].values, filtered_df[savenames[counter][0].replace("_Actual", "_Predicted")].values, grid1, grid2, grid3_actual, grid3_pred, geometry1, geometry2, plane, wind_angle, cut, tolerance, savenames[counter][1], f'{savenames[counter][2]}_arrow.png', arrow10, arrow20, arrow11, arrow21)
>         else:
>             pass
>         counter += 1
> 
173a249,254
>             savenames_scatter_single = [['Velocity_Magnitude', 'Velocity Magnitude', os.path.join(plot_folder,f'{plane}_totalvelocity_scatter_{wind_angle}.png')],
>             ['Velocity_X', 'Velocity X', os.path.join(plot_folder,f'{plane}_vx_scatter_{wind_angle}.png')],
>             ['Velocity_Y', 'Velocity Y', os.path.join(plot_folder,f'{plane}_vy_scatter_{wind_angle}.png')],
>             ['Velocity_Z', 'Velocity Z', os.path.join(plot_folder,f'{plane}_vz_scatter_{wind_angle}.png')],
>             ['Pressure', 'Pressure', os.path.join(plot_folder,f'{plane}_pressure_scatter_{wind_angle}.png')],
>             ['TurbVisc', 'TurbVisc', os.path.join(plot_folder,f'{plane}_turbvisc_scatter_{wind_angle}.png')]]
179a261,266
>             savenames_scatter_double = [['Velocity_Magnitude_Actual', 'Velocity Magnitude', os.path.join(plot_folder,f'{plane}_totalvelocity_scatter_{wind_angle}.png')],
>             ['Velocity_X_Actual', 'Velocity X', os.path.join(plot_folder,f'{plane}_vx_scatter_{wind_angle}.png')],
>             ['Velocity_Y_Actual', 'Velocity Y', os.path.join(plot_folder,f'{plane}_vy_scatter_{wind_angle}.png')],
>             ['Velocity_Z_Actual', 'Velocity Z', os.path.join(plot_folder,f'{plane}_vz_scatter_{wind_angle}.png')],
>             ['Pressure_Actual', 'Pressure', os.path.join(plot_folder,f'{plane}_pressure_scatter_{wind_angle}.png')],
>             ['TurbVisc_Actual', 'TurbVisc', os.path.join(plot_folder,f'{plane}_turbvisc_scatter_{wind_angle}.png')]]
181a269
>                 plot_data_scatter(df, plane, wind_angle, cut, tolerance, geometry_filename, savenames_scatter_single)
183a272
>                 plot_data_scatter_predictions(df, plane, wind_angle, cut, tolerance, geometry_filename, savenames_scatter_double)
193,198c282,287
<             savenames_scatter_single = [['Velocity_Magnitude_Difference', 'Velocity Magnitude_Difference', os.path.join(plot_folder,f'{plane}_totalvelocity_scatter_{wind_angle}.png')],
<             ['Velocity_X_Difference', 'Velocity X_Difference', os.path.join(plot_folder,f'{plane}_vx_scatter_{wind_angle}.png')],
<             ['Velocity_Y_Difference', 'Velocity Y_Difference', os.path.join(plot_folder,f'{plane}_vy_scatter_{wind_angle}.png')],
<             ['Velocity_Z_Difference', 'Velocity Z_Difference', os.path.join(plot_folder,f'{plane}_vz_scatter_{wind_angle}.png')],
<             ['Pressure_Difference', 'Pressure_Difference', os.path.join(plot_folder,f'{plane}_pressure_scatter_{wind_angle}.png')],
<             ['TurbVisc_Difference', 'TurbVisc_Difference', os.path.join(plot_folder,f'{plane}_turbvisc_scatter_{wind_angle}.png')]]
---
>             savenames_scatter_single = [['Velocity_Magnitude_Difference', 'Velocity Magnitude_Difference', os.path.join(plot_folder,f'{plane}_totalvelocity_scatter_diff_{wind_angle}.png')],
>             ['Velocity_X_Difference', 'Velocity X_Difference', os.path.join(plot_folder,f'{plane}_vx_scatter_diff_{wind_angle}.png')],
>             ['Velocity_Y_Difference', 'Velocity Y_Difference', os.path.join(plot_folder,f'{plane}_vy_scatter_diff_{wind_angle}.png')],
>             ['Velocity_Z_Difference', 'Velocity Z_Difference', os.path.join(plot_folder,f'{plane}_vz_scatter_diff_{wind_angle}.png')],
>             ['Pressure_Difference', 'Pressure_Difference', os.path.join(plot_folder,f'{plane}_pressure_scatter_diff_{wind_angle}.png')],
>             ['TurbVisc_Difference', 'TurbVisc_Difference', os.path.join(plot_folder,f'{plane}_turbvisc_scatter_diff_{wind_angle}.png')]]
203c292
<     losses = df.loc[:, 'Data Loss':'Total Loss']
---
>     losses = df.iloc[:, 3:]
240,241c329,330
<     df_mse = df.loc[:, 'MSE_Velocity_X':'MSE_Velocity_Z']
<     df_r2 = df.loc[:, 'R2_Velocity_X':'R2_Velocity_Z']
---
>     df_mse = df.filter(regex='^MSE_')
>     df_r2 = df.filter(regex='^R2_')
